<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>clinica.medica</groupId>
	<artifactId>vitalcare</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>vitalcare</name>
	<description>Trabalho realizado para a disciplina de Engenharia de Software, do curso de Engenharia da Computação do CEFET-MG. Ele consiste na criação de uma aplicação web para uma clínica médica, . A aplicação é dividida em duas partes: uma pública, voltada para o público em geral, e outra de acesso restrito, destinada à equipe interna da clínica.  Na parte pública, a aplicação deve conter páginas como Home, Galeria, Cadastro de Endereços e Agendamento de Consultas, juntamente com uma página de login. A Home exibe informações sobre a clínica, a Galeria mostra fotos relacionadas à clínica, o Cadastro de Endereços permite registrar endereços e o Agendamento de Consultas permite que clientes agendem consultas médicas.  A parte de acesso restrito oferece funcionalidades para a equipe interna da clínica, como o cadastro do prontuário eletrônico do paciente, cadastro de funcionários e pacientes, além de listagens de funcionários, pacientes, endereços e agendamentos. Os médicos também têm a opção de listar apenas seus próprios agendamentos.  O trabalho exige a criação de um banco de dados com várias tabelas interligadas para armazenar informações de pacientes, funcionários, endereços, consultas médicas e outros detalhes clínicos. Além disso, é importante criar uma interface amigável, estruturada e elegante para a aplicação, incluindo recursos de validação de dados e ações dinâmicas, como preenchimento automático de endereços com base no CEP inserido.  No geral, o projeto é desafiador e envolve a criação de uma aplicação web completa que atenda às necessidades de uma clínica médica, proporcionando uma experiência de usuário sólida tanto para o público em geral quanto para a equipe interna.</description>
	<properties>
		<java.version>21</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-starter-mail</artifactId>-->
<!--		</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-authorization-server</artifactId>
		</dependency>
		<dependency>
			<groupId>com.auth0</groupId>
			<artifactId>java-jwt</artifactId>
			<version>4.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
<!--		<dependency>-->
<!--			<groupId>com.mysql</groupId>-->
<!--			<artifactId>mysql-connector-j</artifactId>-->
<!--			<scope>runtime</scope>-->
<!--		</dependency>-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.asciidoctor</groupId>
				<artifactId>asciidoctor-maven-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<id>generate-docs</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>process-asciidoc</goal>
						</goals>
						<configuration>
							<backend>html</backend>
							<doctype>book</doctype>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.springframework.restdocs</groupId>
						<artifactId>spring-restdocs-asciidoctor</artifactId>
						<version>${spring-restdocs.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
